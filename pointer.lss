
pointer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000f1c  00000fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800108  00800108  00000fb8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006370  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e3e  00000000  00000000  0000764c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000313a  00000000  00000000  0000948a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f8  00000000  00000000  0000c5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029ee  00000000  00000000  0000cdbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003842  00000000  00000000  0000f7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000690  00000000  00000000  00012fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fa c0       	rjmp	.+500    	; 0x1f6 <__ctors_end>
   2:	00 00       	nop
   4:	13 c1       	rjmp	.+550    	; 0x22c <__bad_interrupt>
   6:	00 00       	nop
   8:	11 c1       	rjmp	.+546    	; 0x22c <__bad_interrupt>
   a:	00 00       	nop
   c:	0f c1       	rjmp	.+542    	; 0x22c <__bad_interrupt>
   e:	00 00       	nop
  10:	0d c1       	rjmp	.+538    	; 0x22c <__bad_interrupt>
  12:	00 00       	nop
  14:	0b c1       	rjmp	.+534    	; 0x22c <__bad_interrupt>
  16:	00 00       	nop
  18:	09 c1       	rjmp	.+530    	; 0x22c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	07 c1       	rjmp	.+526    	; 0x22c <__bad_interrupt>
  1e:	00 00       	nop
  20:	05 c1       	rjmp	.+522    	; 0x22c <__bad_interrupt>
  22:	00 00       	nop
  24:	03 c1       	rjmp	.+518    	; 0x22c <__bad_interrupt>
  26:	00 00       	nop
  28:	14 c5       	rjmp	.+2600   	; 0xa52 <__vector_10>
  2a:	00 00       	nop
  2c:	de c5       	rjmp	.+3004   	; 0xbea <__vector_11>
  2e:	00 00       	nop
  30:	fd c0       	rjmp	.+506    	; 0x22c <__bad_interrupt>
  32:	00 00       	nop
  34:	fb c0       	rjmp	.+502    	; 0x22c <__bad_interrupt>
  36:	00 00       	nop
  38:	f9 c0       	rjmp	.+498    	; 0x22c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f7 c0       	rjmp	.+494    	; 0x22c <__bad_interrupt>
  3e:	00 00       	nop
  40:	f5 c0       	rjmp	.+490    	; 0x22c <__bad_interrupt>
  42:	00 00       	nop
  44:	f3 c0       	rjmp	.+486    	; 0x22c <__bad_interrupt>
  46:	00 00       	nop
  48:	f1 c0       	rjmp	.+482    	; 0x22c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ef c0       	rjmp	.+478    	; 0x22c <__bad_interrupt>
  4e:	00 00       	nop
  50:	ed c0       	rjmp	.+474    	; 0x22c <__bad_interrupt>
  52:	00 00       	nop
  54:	eb c0       	rjmp	.+470    	; 0x22c <__bad_interrupt>
  56:	00 00       	nop
  58:	e9 c0       	rjmp	.+466    	; 0x22c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e7 c0       	rjmp	.+462    	; 0x22c <__bad_interrupt>
  5e:	00 00       	nop
  60:	e5 c0       	rjmp	.+458    	; 0x22c <__bad_interrupt>
  62:	00 00       	nop
  64:	e3 c0       	rjmp	.+454    	; 0x22c <__bad_interrupt>
  66:	00 00       	nop
  68:	e1 c0       	rjmp	.+450    	; 0x22c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	df c0       	rjmp	.+446    	; 0x22c <__bad_interrupt>
  6e:	00 00       	nop
  70:	dd c0       	rjmp	.+442    	; 0x22c <__bad_interrupt>
  72:	00 00       	nop
  74:	db c0       	rjmp	.+438    	; 0x22c <__bad_interrupt>
  76:	00 00       	nop
  78:	d9 c0       	rjmp	.+434    	; 0x22c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d7 c0       	rjmp	.+430    	; 0x22c <__bad_interrupt>
  7e:	00 00       	nop
  80:	d5 c0       	rjmp	.+426    	; 0x22c <__bad_interrupt>
  82:	00 00       	nop
  84:	d3 c0       	rjmp	.+422    	; 0x22c <__bad_interrupt>
  86:	00 00       	nop
  88:	d1 c0       	rjmp	.+418    	; 0x22c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	cf c0       	rjmp	.+414    	; 0x22c <__bad_interrupt>
  8e:	00 00       	nop
  90:	cd c0       	rjmp	.+410    	; 0x22c <__bad_interrupt>
  92:	00 00       	nop
  94:	cb c0       	rjmp	.+406    	; 0x22c <__bad_interrupt>
  96:	00 00       	nop
  98:	c9 c0       	rjmp	.+402    	; 0x22c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	c7 c0       	rjmp	.+398    	; 0x22c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c5 c0       	rjmp	.+394    	; 0x22c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c3 c0       	rjmp	.+390    	; 0x22c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c1 c0       	rjmp	.+386    	; 0x22c <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	24 03 34 00 20 00 42 00 75 00 74 00 74 00 6f 00     $.4. .B.u.t.t.o.
  bc:	6e 00 20 00 4b 00 65 00 79 00 62 00 6f 00 61 00     n. .K.e.y.b.o.a.
  cc:	72 00 64 00 00 00                                   r.d...

000000d2 <ManufacturerString>:
  d2:	1a 03 6a 00 61 00 63 00 6b 00 79 00 6c 00 69 00     ..j.a.c.k.y.l.i.
  e2:	61 00 6f 00 31 00 32 00 33 00 00 00                 a.o.1.2.3...

000000ee <LanguageString>:
  ee:	04 03 09 04                                         ....

000000f2 <ConfigurationDescriptor>:
  f2:	09 02 77 00 04 01 00 80 fa 09 04 00 00 01 02 02     ..w.............
 102:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 112:	07 05 81 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 122:	07 05 03 02 10 00 05 07 05 82 02 10 00 05 09 04     ................
 132:	02 00 02 03 01 01 00 09 21 11 01 00 01 22 40 00     ........!...."@.
 142:	07 05 84 03 08 00 05 07 05 05 03 08 00 05 09 04     ................
 152:	03 00 01 03 01 02 00 09 21 11 01 00 01 22 3a 00     ........!....":.
 162:	07 05 86 03 10 00 05                                .......

00000169 <DeviceDescriptor>:
 169:	12 01 10 01 ef 02 01 08 00 00 00 00 01 00 01 02     ................
 179:	dc 01                                               ..

0000017b <MouseReport>:
 17b:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
 18b:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
 19b:	05 01 09 30 09 31 16 00 00 26 7f 00 36 00 00 46     ...0.1...&..6..F
 1ab:	7f 00 95 02 75 08 81 02 c0 c0                       ....u.....

000001b5 <KeyboardReport>:
 1b5:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
 1c5:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
 1d5:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
 1e5:	26 ff 00 05 07 19 00 29 ff 95 06 75 08 81 00 c0     &......)...u....
 1f5:	00                                                  .

000001f6 <__ctors_end>:
 1f6:	11 24       	eor	r1, r1
 1f8:	1f be       	out	0x3f, r1	; 63
 1fa:	cf ef       	ldi	r28, 0xFF	; 255
 1fc:	da e0       	ldi	r29, 0x0A	; 10
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	cd bf       	out	0x3d, r28	; 61

00000202 <__do_copy_data>:
 202:	11 e0       	ldi	r17, 0x01	; 1
 204:	a0 e0       	ldi	r26, 0x00	; 0
 206:	b1 e0       	ldi	r27, 0x01	; 1
 208:	ec e1       	ldi	r30, 0x1C	; 28
 20a:	ff e0       	ldi	r31, 0x0F	; 15
 20c:	02 c0       	rjmp	.+4      	; 0x212 <__do_copy_data+0x10>
 20e:	05 90       	lpm	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	a8 30       	cpi	r26, 0x08	; 8
 214:	b1 07       	cpc	r27, r17
 216:	d9 f7       	brne	.-10     	; 0x20e <__do_copy_data+0xc>

00000218 <__do_clear_bss>:
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	a8 e0       	ldi	r26, 0x08	; 8
 21c:	b1 e0       	ldi	r27, 0x01	; 1
 21e:	01 c0       	rjmp	.+2      	; 0x222 <.do_clear_bss_start>

00000220 <.do_clear_bss_loop>:
 220:	1d 92       	st	X+, r1

00000222 <.do_clear_bss_start>:
 222:	ac 34       	cpi	r26, 0x4C	; 76
 224:	b2 07       	cpc	r27, r18
 226:	e1 f7       	brne	.-8      	; 0x220 <.do_clear_bss_loop>
 228:	02 d0       	rcall	.+4      	; 0x22e <main>
 22a:	76 c6       	rjmp	.+3308   	; 0xf18 <_exit>

0000022c <__bad_interrupt>:
 22c:	e9 ce       	rjmp	.-558    	; 0x0 <__vectors>

0000022e <main>:
#include "spi.h"
#include "usb.h"

int main(void) {
	usb_init();
 22e:	39 d1       	rcall	.+626    	; 0x4a2 <usb_init>
    spi_init();
 230:	73 d1       	rcall	.+742    	; 0x518 <spi_init>

	while(1) {
        uint8_t x = spi_recv();
 232:	77 d1       	rcall	.+750    	; 0x522 <spi_recv>
 234:	c8 2f       	mov	r28, r24
        uint8_t y = spi_recv();
 236:	75 d1       	rcall	.+746    	; 0x522 <spi_recv>
 238:	68 2f       	mov	r22, r24
        usb_mouse_move(x, y);
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	8c 2f       	mov	r24, r28
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	66 d1       	rcall	.+716    	; 0x50e <usb_mouse_move>
 242:	f7 cf       	rjmp	.-18     	; 0x232 <main+0x4>

00000244 <EVENT_USB_Device_Connect>:
 244:	08 95       	ret

00000246 <EVENT_USB_Device_Disconnect>:
 246:	08 95       	ret

00000248 <EVENT_USB_Device_ConfigurationChanged>:
	usb_keyboard_send_report();
}

void usb_keyboard_modifier_up(uint8_t modifier) {
	keyboard_report.Modifier &= ~(1 << modifier);
	usb_keyboard_send_report();
 248:	42 e0       	ldi	r20, 0x02	; 2
 24a:	61 ec       	ldi	r22, 0xC1	; 193
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0a d3       	rcall	.+1556   	; 0x864 <Endpoint_ConfigureEndpoint_Prv>
 250:	42 e1       	ldi	r20, 0x12	; 18
 252:	61 e8       	ldi	r22, 0x81	; 129
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	06 d3       	rcall	.+1548   	; 0x864 <Endpoint_ConfigureEndpoint_Prv>
 258:	42 e1       	ldi	r20, 0x12	; 18
 25a:	60 e8       	ldi	r22, 0x80	; 128
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	02 d3       	rcall	.+1540   	; 0x864 <Endpoint_ConfigureEndpoint_Prv>
 260:	42 e0       	ldi	r20, 0x02	; 2
 262:	61 ec       	ldi	r22, 0xC1	; 193
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	fe d2       	rcall	.+1532   	; 0x864 <Endpoint_ConfigureEndpoint_Prv>
 268:	42 e0       	ldi	r20, 0x02	; 2
 26a:	60 ec       	ldi	r22, 0xC0	; 192
 26c:	85 e0       	ldi	r24, 0x05	; 5
 26e:	fa d2       	rcall	.+1524   	; 0x864 <Endpoint_ConfigureEndpoint_Prv>
 270:	42 e0       	ldi	r20, 0x02	; 2
 272:	61 ec       	ldi	r22, 0xC1	; 193
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	f6 d2       	rcall	.+1516   	; 0x864 <Endpoint_ConfigureEndpoint_Prv>
 278:	e2 ee       	ldi	r30, 0xE2	; 226
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	84 60       	ori	r24, 0x04	; 4
 280:	80 83       	st	Z, r24
 282:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 286:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 28a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
 28e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
 292:	08 95       	ret

00000294 <EVENT_USB_Device_ControlRequest>:
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 d0       	rcall	.+0      	; 0x29a <EVENT_USB_Device_ControlRequest+0x6>
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <USB_ControlRequest+0x1>
 2a2:	8a 30       	cpi	r24, 0x0A	; 10
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <EVENT_USB_Device_ControlRequest+0x14>
 2a6:	ca c0       	rjmp	.+404    	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
 2a8:	10 f5       	brcc	.+68     	; 0x2ee <EVENT_USB_Device_ControlRequest+0x5a>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <EVENT_USB_Device_ControlRequest+0x1c>
 2ae:	e1 c0       	rjmp	.+450    	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
 2b0:	40 f4       	brcc	.+16     	; 0x2c2 <EVENT_USB_Device_ControlRequest+0x2e>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 2b6:	8c c0       	rjmp	.+280    	; 0x3d0 <EVENT_USB_Device_ControlRequest+0x13c>
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <EVENT_USB_Device_ControlRequest+0x34>
 2c6:	a8 c0       	rjmp	.+336    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 2c8:	89 30       	cpi	r24, 0x09	; 9
 2ca:	b1 f7       	brne	.-20     	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 2cc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 2d0:	81 32       	cpi	r24, 0x21	; 33
 2d2:	91 f7       	brne	.-28     	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 2d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2d8:	87 7f       	andi	r24, 0xF7	; 247
 2da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2e2:	82 ff       	sbrs	r24, 2
 2e4:	94 c0       	rjmp	.+296    	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 2e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 2ea:	8b 77       	andi	r24, 0x7B	; 123
 2ec:	25 c0       	rjmp	.+74     	; 0x338 <EVENT_USB_Device_ControlRequest+0xa4>
 2ee:	80 32       	cpi	r24, 0x20	; 32
 2f0:	d1 f1       	breq	.+116    	; 0x366 <EVENT_USB_Device_ControlRequest+0xd2>
 2f2:	b8 f4       	brcc	.+46     	; 0x322 <EVENT_USB_Device_ControlRequest+0x8e>
 2f4:	8b 30       	cpi	r24, 0x0B	; 11
 2f6:	01 f7       	brne	.-64     	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 2f8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 2fc:	81 32       	cpi	r24, 0x21	; 33
 2fe:	e1 f6       	brne	.-72     	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 300:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 304:	87 7f       	andi	r24, 0xF7	; 247
 306:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 30a:	e0 d2       	rcall	.+1472   	; 0x8cc <Endpoint_ClearStatusStage>
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <USB_ControlRequest+0x2>
 312:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <USB_ControlRequest+0x3>
 316:	23 2b       	or	r18, r19
 318:	09 f4       	brne	.+2      	; 0x31c <EVENT_USB_Device_ControlRequest+0x88>
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <is_report_protocol>
 320:	cb cf       	rjmp	.-106    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 322:	81 32       	cpi	r24, 0x21	; 33
 324:	69 f0       	breq	.+26     	; 0x340 <EVENT_USB_Device_ControlRequest+0xac>
 326:	82 32       	cpi	r24, 0x22	; 34
 328:	39 f6       	brne	.-114    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 32a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 32e:	81 32       	cpi	r24, 0x21	; 33
 330:	19 f6       	brne	.-122    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 332:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 336:	87 7f       	andi	r24, 0xF7	; 247
 338:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 33c:	c7 d2       	rcall	.+1422   	; 0x8cc <Endpoint_ClearStatusStage>
 33e:	bc cf       	rjmp	.-136    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 340:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 344:	81 3a       	cpi	r24, 0xA1	; 161
 346:	09 f0       	breq	.+2      	; 0x34a <EVENT_USB_Device_ControlRequest+0xb6>
 348:	b7 cf       	rjmp	.-146    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 34a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 34e:	87 7f       	andi	r24, 0xF7	; 247
 350:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	89 d1       	rcall	.+786    	; 0x670 <Endpoint_Write_Control_Stream_LE>
 35e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 362:	8b 77       	andi	r24, 0x7B	; 123
 364:	32 c0       	rjmp	.+100    	; 0x3ca <EVENT_USB_Device_ControlRequest+0x136>
 366:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 36a:	81 32       	cpi	r24, 0x21	; 33
 36c:	09 f0       	breq	.+2      	; 0x370 <EVENT_USB_Device_ControlRequest+0xdc>
 36e:	a4 cf       	rjmp	.-184    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 370:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 374:	87 7f       	andi	r24, 0xF7	; 247
 376:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 37a:	67 e0       	ldi	r22, 0x07	; 7
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	d5 d1       	rcall	.+938    	; 0x72e <Endpoint_Read_Control_Stream_LE>
 384:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 388:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 38c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 390:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 394:	80 3b       	cpi	r24, 0xB0	; 176
 396:	94 40       	sbci	r25, 0x04	; 4
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
 39c:	99 f4       	brne	.+38     	; 0x3c4 <EVENT_USB_Device_ControlRequest+0x130>
 39e:	87 e7       	ldi	r24, 0x77	; 119
 3a0:	97 e7       	ldi	r25, 0x77	; 119
 3a2:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <__bss_end+0x6b5>
 3a6:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__bss_end+0x6b4>
 3aa:	de d2       	rcall	.+1468   	; 0x968 <USB_Disable>
 3ac:	f8 94       	cli
 3ae:	88 e1       	ldi	r24, 0x18	; 24
 3b0:	98 e0       	ldi	r25, 0x08	; 8
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	a8 95       	wdr
 3b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <EVENT_USB_Device_ControlRequest+0x12e>
 3c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3c8:	8e 77       	andi	r24, 0x7E	; 126
 3ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3ce:	74 cf       	rjmp	.-280    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 3d0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 3d4:	81 3a       	cpi	r24, 0xA1	; 161
 3d6:	09 f0       	breq	.+2      	; 0x3da <EVENT_USB_Device_ControlRequest+0x146>
 3d8:	6f cf       	rjmp	.-290    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 3da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3de:	87 7f       	andi	r24, 0xF7	; 247
 3e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3e4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest+0x4>
 3e8:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <USB_ControlRequest+0x5>
 3ec:	89 2b       	or	r24, r25
 3ee:	49 f4       	brne	.+18     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3f0:	8e e0       	ldi	r24, 0x0E	; 14
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	9a 83       	std	Y+2, r25	; 0x02
 3f6:	89 83       	std	Y+1, r24	; 0x01
 3f8:	68 e0       	ldi	r22, 0x08	; 8
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	ce 01       	movw	r24, r28
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	ad cf       	rjmp	.-166    	; 0x35c <EVENT_USB_Device_ControlRequest+0xc8>
 402:	8b e0       	ldi	r24, 0x0B	; 11
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	9a 83       	std	Y+2, r25	; 0x02
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	63 e0       	ldi	r22, 0x03	; 3
 40c:	f6 cf       	rjmp	.-20     	; 0x3fa <EVENT_USB_Device_ControlRequest+0x166>
 40e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
 412:	81 11       	cpse	r24, r1
 414:	64 cf       	rjmp	.-312    	; 0x2de <EVENT_USB_Device_ControlRequest+0x4a>
 416:	50 cf       	rjmp	.-352    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 418:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 41c:	81 3a       	cpi	r24, 0xA1	; 161
 41e:	09 f0       	breq	.+2      	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
 420:	4b cf       	rjmp	.-362    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 422:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 426:	87 7f       	andi	r24, 0xF7	; 247
 428:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 42c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <is_report_protocol>
 430:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 434:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 438:	8e 77       	andi	r24, 0x7E	; 126
 43a:	7e cf       	rjmp	.-260    	; 0x338 <EVENT_USB_Device_ControlRequest+0xa4>
 43c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 440:	81 32       	cpi	r24, 0x21	; 33
 442:	09 f0       	breq	.+2      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
 444:	39 cf       	rjmp	.-398    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 446:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 44a:	87 7f       	andi	r24, 0xF7	; 247
 44c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 450:	3d d2       	rcall	.+1146   	; 0x8cc <Endpoint_ClearStatusStage>
 452:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <USB_ControlRequest+0x2>
 456:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <USB_ControlRequest+0x3>
 45a:	26 e0       	ldi	r18, 0x06	; 6
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	2a 95       	dec	r18
 462:	e1 f7       	brne	.-8      	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 464:	8c 7f       	andi	r24, 0xFC	; 252
 466:	93 70       	andi	r25, 0x03	; 3
 468:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 46c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 470:	23 cf       	rjmp	.-442    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 472:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 476:	81 3a       	cpi	r24, 0xA1	; 161
 478:	09 f0       	breq	.+2      	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
 47a:	1e cf       	rjmp	.-452    	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x24>
 47c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 480:	87 7f       	andi	r24, 0xF7	; 247
 482:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 486:	8d e7       	ldi	r24, 0x7D	; 125
 488:	d3 cf       	rjmp	.-90     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>

0000048a <EVENT_USB_Device_StartOfFrame>:
 48a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 48e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	29 f0       	breq	.+10     	; 0x4a0 <EVENT_USB_Device_StartOfFrame+0x16>
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 49c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
 4a0:	08 95       	ret

000004a2 <usb_init>:
 4a2:	88 e2       	ldi	r24, 0x28	; 40
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <send_buf+0x1>
 4aa:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <send_buf>
 4ae:	88 e1       	ldi	r24, 0x18	; 24
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <recv_buf+0x1>
 4b6:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <recv_buf>
 4ba:	84 b7       	in	r24, 0x34	; 52
 4bc:	87 7f       	andi	r24, 0xF7	; 247
 4be:	84 bf       	out	0x34, r24	; 52
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	f8 94       	cli
 4c4:	a8 95       	wdr
 4c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 4ca:	88 61       	ori	r24, 0x18	; 24
 4cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 4d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	80 e8       	ldi	r24, 0x80	; 128
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 4e2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	97 d2       	rcall	.+1326   	; 0xa18 <USB_Init>
 4ea:	78 94       	sei
 4ec:	08 95       	ret

000004ee <usb_mouse_send_report>:
 4ee:	86 e0       	ldi	r24, 0x06	; 6
 4f0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	63 e0       	ldi	r22, 0x03	; 3
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	8b e0       	ldi	r24, 0x0B	; 11
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	6a d0       	rcall	.+212    	; 0x5d6 <Endpoint_Write_Stream_LE>
 502:	e8 ee       	ldi	r30, 0xE8	; 232
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	8e 77       	andi	r24, 0x7E	; 126
 50a:	80 83       	st	Z, r24
 50c:	08 95       	ret

0000050e <usb_mouse_move>:
}

void usb_mouse_move(uint16_t x, uint16_t y) {
	mouse_report.X = x;
 50e:	eb e0       	ldi	r30, 0x0B	; 11
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	81 83       	std	Z+1, r24	; 0x01
	mouse_report.Y = y;
 514:	62 83       	std	Z+2, r22	; 0x02
	usb_mouse_send_report();
 516:	eb cf       	rjmp	.-42     	; 0x4ee <usb_mouse_send_report>

00000518 <spi_init>:

#include <avr/pgmspace.h>
#include <avr/io.h>

void spi_init(void) {
    DDRB = (1 << DDB2);
 518:	84 e0       	ldi	r24, 0x04	; 4
 51a:	84 b9       	out	0x04, r24	; 4
    SPCR = (1 << SPE);
 51c:	80 e4       	ldi	r24, 0x40	; 64
 51e:	8c bd       	out	0x2c, r24	; 44
}
 520:	08 95       	ret

00000522 <spi_recv>:

uint8_t spi_recv(void) {
    while(!(SPSR & (1<<SPIF)));
 522:	0d b4       	in	r0, 0x2d	; 45
 524:	07 fe       	sbrs	r0, 7
 526:	fd cf       	rjmp	.-6      	; 0x522 <spi_recv>
    return SPSR;
 528:	8d b5       	in	r24, 0x2d	; 45
}
 52a:	08 95       	ret

0000052c <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 52c:	29 2f       	mov	r18, r25
 52e:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 530:	23 30       	cpi	r18, 0x03	; 3
 532:	31 05       	cpc	r19, r1
 534:	71 f1       	breq	.+92     	; 0x592 <CALLBACK_USB_GetDescriptor+0x66>
 536:	58 f4       	brcc	.+22     	; 0x54e <CALLBACK_USB_GetDescriptor+0x22>
 538:	21 30       	cpi	r18, 0x01	; 1
 53a:	31 05       	cpc	r19, r1
 53c:	e9 f0       	breq	.+58     	; 0x578 <CALLBACK_USB_GetDescriptor+0x4c>
 53e:	22 30       	cpi	r18, 0x02	; 2
 540:	31 05       	cpc	r19, r1
 542:	11 f1       	breq	.+68     	; 0x588 <CALLBACK_USB_GetDescriptor+0x5c>
	uint16_t    Size    = NO_DESCRIPTOR;
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	19 c0       	rjmp	.+50     	; 0x580 <CALLBACK_USB_GetDescriptor+0x54>
	switch (DescriptorType)
 54e:	21 32       	cpi	r18, 0x21	; 33
 550:	31 05       	cpc	r19, r1
 552:	91 f1       	breq	.+100    	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x8c>
 554:	22 32       	cpi	r18, 0x22	; 34
 556:	31 05       	cpc	r19, r1
 558:	a9 f7       	brne	.-22     	; 0x544 <CALLBACK_USB_GetDescriptor+0x18>
		case HID_DTYPE_Report:
			switch (wIndex)
			{
				case INTERFACE_ID_Keyboard:
					Address = &KeyboardReport;
					Size    = sizeof(KeyboardReport);
 55a:	80 e4       	ldi	r24, 0x40	; 64
 55c:	90 e0       	ldi	r25, 0x00	; 0
					Address = &KeyboardReport;
 55e:	25 eb       	ldi	r18, 0xB5	; 181
 560:	31 e0       	ldi	r19, 0x01	; 1
			switch (wIndex)
 562:	62 30       	cpi	r22, 0x02	; 2
 564:	71 05       	cpc	r23, r1
 566:	61 f0       	breq	.+24     	; 0x580 <CALLBACK_USB_GetDescriptor+0x54>
					break;
				case INTERFACE_ID_Mouse:
					Address = &MouseReport;
					Size    = sizeof(MouseReport);
 568:	8a e3       	ldi	r24, 0x3A	; 58
 56a:	90 e0       	ldi	r25, 0x00	; 0
					Address = &MouseReport;
 56c:	2b e7       	ldi	r18, 0x7B	; 123
 56e:	31 e0       	ldi	r19, 0x01	; 1
			switch (wIndex)
 570:	63 30       	cpi	r22, 0x03	; 3
 572:	71 05       	cpc	r23, r1
 574:	29 f0       	breq	.+10     	; 0x580 <CALLBACK_USB_GetDescriptor+0x54>
 576:	e6 cf       	rjmp	.-52     	; 0x544 <CALLBACK_USB_GetDescriptor+0x18>
			Size    = sizeof(USB_Descriptor_Device_t);
 578:	82 e1       	ldi	r24, 0x12	; 18
 57a:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
 57c:	29 e6       	ldi	r18, 0x69	; 105
 57e:	31 e0       	ldi	r19, 0x01	; 1
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
 580:	fa 01       	movw	r30, r20
 582:	31 83       	std	Z+1, r19	; 0x01
 584:	20 83       	st	Z, r18
	return Size;
}
 586:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
 588:	87 e7       	ldi	r24, 0x77	; 119
 58a:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
 58c:	22 ef       	ldi	r18, 0xF2	; 242
 58e:	30 e0       	ldi	r19, 0x00	; 0
			break;
 590:	f7 cf       	rjmp	.-18     	; 0x580 <CALLBACK_USB_GetDescriptor+0x54>
			switch (DescriptorNumber)
 592:	99 27       	eor	r25, r25
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	91 05       	cpc	r25, r1
 598:	61 f0       	breq	.+24     	; 0x5b2 <CALLBACK_USB_GetDescriptor+0x86>
 59a:	28 f0       	brcs	.+10     	; 0x5a6 <CALLBACK_USB_GetDescriptor+0x7a>
 59c:	02 97       	sbiw	r24, 0x02	; 2
 59e:	91 f6       	brne	.-92     	; 0x544 <CALLBACK_USB_GetDescriptor+0x18>
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5a0:	ec ea       	ldi	r30, 0xAC	; 172
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <CALLBACK_USB_GetDescriptor+0x7e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 5a6:	ee ee       	ldi	r30, 0xEE	; 238
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5aa:	84 91       	lpm	r24, Z
 5ac:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
 5ae:	9f 01       	movw	r18, r30
					break;
 5b0:	e7 cf       	rjmp	.-50     	; 0x580 <CALLBACK_USB_GetDescriptor+0x54>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 5b2:	e2 ed       	ldi	r30, 0xD2	; 210
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	f9 cf       	rjmp	.-14     	; 0x5aa <CALLBACK_USB_GetDescriptor+0x7e>
					Size    = sizeof(USB_HID_Descriptor_HID_t);
 5b8:	89 e0       	ldi	r24, 0x09	; 9
 5ba:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ConfigurationDescriptor.HID1_KeyboardHID;
 5bc:	29 e3       	ldi	r18, 0x39	; 57
 5be:	31 e0       	ldi	r19, 0x01	; 1
			switch (wIndex)
 5c0:	62 30       	cpi	r22, 0x02	; 2
 5c2:	71 05       	cpc	r23, r1
 5c4:	e9 f2       	breq	.-70     	; 0x580 <CALLBACK_USB_GetDescriptor+0x54>
					Size    = sizeof(USB_HID_Descriptor_HID_t);
 5c6:	89 e0       	ldi	r24, 0x09	; 9
 5c8:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ConfigurationDescriptor.HID2_MouseHID;
 5ca:	29 e5       	ldi	r18, 0x59	; 89
 5cc:	31 e0       	ldi	r19, 0x01	; 1
			switch (wIndex)
 5ce:	63 30       	cpi	r22, 0x03	; 3
 5d0:	71 05       	cpc	r23, r1
 5d2:	b1 f2       	breq	.-84     	; 0x580 <CALLBACK_USB_GetDescriptor+0x54>
 5d4:	b7 cf       	rjmp	.-146    	; 0x544 <CALLBACK_USB_GetDescriptor+0x18>

000005d6 <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5d6:	af 92       	push	r10
 5d8:	bf 92       	push	r11
 5da:	cf 92       	push	r12
 5dc:	df 92       	push	r13
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	6c 01       	movw	r12, r24
 5ea:	eb 01       	movw	r28, r22
 5ec:	8a 01       	movw	r16, r20
 5ee:	8d d1       	rcall	.+794    	; 0x90a <Endpoint_WaitUntilReady>
 5f0:	f8 2e       	mov	r15, r24
 5f2:	81 11       	cpse	r24, r1
 5f4:	23 c0       	rjmp	.+70     	; 0x63c <Endpoint_Write_Stream_LE+0x66>
 5f6:	01 15       	cp	r16, r1
 5f8:	11 05       	cpc	r17, r1
 5fa:	39 f0       	breq	.+14     	; 0x60a <Endpoint_Write_Stream_LE+0x34>
 5fc:	f8 01       	movw	r30, r16
 5fe:	80 81       	ld	r24, Z
 600:	91 81       	ldd	r25, Z+1	; 0x01
 602:	c8 1b       	sub	r28, r24
 604:	d9 0b       	sbc	r29, r25
 606:	c8 0e       	add	r12, r24
 608:	d9 1e       	adc	r13, r25
 60a:	b1 2c       	mov	r11, r1
 60c:	a1 2c       	mov	r10, r1
 60e:	20 97       	sbiw	r28, 0x00	; 0
 610:	a9 f0       	breq	.+42     	; 0x63c <Endpoint_Write_Stream_LE+0x66>
 612:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 616:	85 fd       	sbrc	r24, 5
 618:	21 c0       	rjmp	.+66     	; 0x65c <Endpoint_Write_Stream_LE+0x86>
 61a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 61e:	8e 77       	andi	r24, 0x7E	; 126
 620:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 624:	01 15       	cp	r16, r1
 626:	11 05       	cpc	r17, r1
 628:	a1 f0       	breq	.+40     	; 0x652 <Endpoint_Write_Stream_LE+0x7c>
 62a:	f8 01       	movw	r30, r16
 62c:	80 81       	ld	r24, Z
 62e:	91 81       	ldd	r25, Z+1	; 0x01
 630:	a8 0e       	add	r10, r24
 632:	b9 1e       	adc	r11, r25
 634:	b1 82       	std	Z+1, r11	; 0x01
 636:	a0 82       	st	Z, r10
 638:	85 e0       	ldi	r24, 0x05	; 5
 63a:	f8 2e       	mov	r15, r24
 63c:	8f 2d       	mov	r24, r15
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	df 90       	pop	r13
 64a:	cf 90       	pop	r12
 64c:	bf 90       	pop	r11
 64e:	af 90       	pop	r10
 650:	08 95       	ret
 652:	5b d1       	rcall	.+694    	; 0x90a <Endpoint_WaitUntilReady>
 654:	88 23       	and	r24, r24
 656:	d9 f2       	breq	.-74     	; 0x60e <Endpoint_Write_Stream_LE+0x38>
 658:	f8 2e       	mov	r15, r24
 65a:	f0 cf       	rjmp	.-32     	; 0x63c <Endpoint_Write_Stream_LE+0x66>
 65c:	f6 01       	movw	r30, r12
 65e:	81 91       	ld	r24, Z+
 660:	6f 01       	movw	r12, r30
 662:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 666:	21 97       	sbiw	r28, 0x01	; 1
 668:	ff ef       	ldi	r31, 0xFF	; 255
 66a:	af 1a       	sub	r10, r31
 66c:	bf 0a       	sbc	r11, r31
 66e:	cf cf       	rjmp	.-98     	; 0x60e <Endpoint_Write_Stream_LE+0x38>

00000670 <Endpoint_Write_Control_Stream_LE>:
 670:	fc 01       	movw	r30, r24
 672:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_ControlRequest+0x6>
 676:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <USB_ControlRequest+0x7>
 67a:	86 17       	cp	r24, r22
 67c:	97 07       	cpc	r25, r23
 67e:	a0 f0       	brcs	.+40     	; 0x6a8 <Endpoint_Write_Control_Stream_LE+0x38>
 680:	61 15       	cp	r22, r1
 682:	71 05       	cpc	r23, r1
 684:	29 f4       	brne	.+10     	; 0x690 <Endpoint_Write_Control_Stream_LE+0x20>
 686:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 68a:	9e 77       	andi	r25, 0x7E	; 126
 68c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	61 15       	cp	r22, r1
 694:	71 05       	cpc	r23, r1
 696:	51 f4       	brne	.+20     	; 0x6ac <Endpoint_Write_Control_Stream_LE+0x3c>
 698:	91 11       	cpse	r25, r1
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <Endpoint_Write_Control_Stream_LE+0x3c>
 69c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6a0:	82 ff       	sbrs	r24, 2
 6a2:	35 c0       	rjmp	.+106    	; 0x70e <Endpoint_Write_Control_Stream_LE+0x9e>
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 95       	ret
 6a8:	bc 01       	movw	r22, r24
 6aa:	f2 cf       	rjmp	.-28     	; 0x690 <Endpoint_Write_Control_Stream_LE+0x20>
 6ac:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
 6b0:	88 23       	and	r24, r24
 6b2:	c9 f1       	breq	.+114    	; 0x726 <Endpoint_Write_Control_Stream_LE+0xb6>
 6b4:	85 30       	cpi	r24, 0x05	; 5
 6b6:	c9 f1       	breq	.+114    	; 0x72a <Endpoint_Write_Control_Stream_LE+0xba>
 6b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6bc:	83 fd       	sbrc	r24, 3
 6be:	31 c0       	rjmp	.+98     	; 0x722 <Endpoint_Write_Control_Stream_LE+0xb2>
 6c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6c4:	82 fd       	sbrc	r24, 2
 6c6:	ea cf       	rjmp	.-44     	; 0x69c <Endpoint_Write_Control_Stream_LE+0x2c>
 6c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6cc:	80 ff       	sbrs	r24, 0
 6ce:	e1 cf       	rjmp	.-62     	; 0x692 <Endpoint_Write_Control_Stream_LE+0x22>
 6d0:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 6d4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 6d8:	32 2f       	mov	r19, r18
 6da:	28 2f       	mov	r18, r24
 6dc:	61 15       	cp	r22, r1
 6de:	71 05       	cpc	r23, r1
 6e0:	19 f0       	breq	.+6      	; 0x6e8 <Endpoint_Write_Control_Stream_LE+0x78>
 6e2:	28 30       	cpi	r18, 0x08	; 8
 6e4:	31 05       	cpc	r19, r1
 6e6:	58 f0       	brcs	.+22     	; 0x6fe <Endpoint_Write_Control_Stream_LE+0x8e>
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	28 30       	cpi	r18, 0x08	; 8
 6ec:	31 05       	cpc	r19, r1
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <Endpoint_Write_Control_Stream_LE+0x82>
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f6:	2e 77       	andi	r18, 0x7E	; 126
 6f8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6fc:	ca cf       	rjmp	.-108    	; 0x692 <Endpoint_Write_Control_Stream_LE+0x22>
 6fe:	81 91       	ld	r24, Z+
 700:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 704:	61 50       	subi	r22, 0x01	; 1
 706:	71 09       	sbc	r23, r1
 708:	2f 5f       	subi	r18, 0xFF	; 255
 70a:	3f 4f       	sbci	r19, 0xFF	; 255
 70c:	e7 cf       	rjmp	.-50     	; 0x6dc <Endpoint_Write_Control_Stream_LE+0x6c>
 70e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
 712:	88 23       	and	r24, r24
 714:	41 f0       	breq	.+16     	; 0x726 <Endpoint_Write_Control_Stream_LE+0xb6>
 716:	85 30       	cpi	r24, 0x05	; 5
 718:	41 f0       	breq	.+16     	; 0x72a <Endpoint_Write_Control_Stream_LE+0xba>
 71a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 71e:	83 ff       	sbrs	r24, 3
 720:	bd cf       	rjmp	.-134    	; 0x69c <Endpoint_Write_Control_Stream_LE+0x2c>
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	08 95       	ret
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	08 95       	ret
 72a:	83 e0       	ldi	r24, 0x03	; 3
 72c:	08 95       	ret

0000072e <Endpoint_Read_Control_Stream_LE>:
 72e:	fc 01       	movw	r30, r24
 730:	61 15       	cp	r22, r1
 732:	71 05       	cpc	r23, r1
 734:	29 f4       	brne	.+10     	; 0x740 <Endpoint_Read_Control_Stream_LE+0x12>
 736:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 73a:	9b 77       	andi	r25, 0x7B	; 123
 73c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 740:	61 15       	cp	r22, r1
 742:	71 05       	cpc	r23, r1
 744:	31 f4       	brne	.+12     	; 0x752 <Endpoint_Read_Control_Stream_LE+0x24>
 746:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 74a:	80 ff       	sbrs	r24, 0
 74c:	1f c0       	rjmp	.+62     	; 0x78c <Endpoint_Read_Control_Stream_LE+0x5e>
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	08 95       	ret
 752:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
 756:	88 23       	and	r24, r24
 758:	19 f1       	breq	.+70     	; 0x7a0 <Endpoint_Read_Control_Stream_LE+0x72>
 75a:	85 30       	cpi	r24, 0x05	; 5
 75c:	e9 f0       	breq	.+58     	; 0x798 <Endpoint_Read_Control_Stream_LE+0x6a>
 75e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 762:	83 fd       	sbrc	r24, 3
 764:	1b c0       	rjmp	.+54     	; 0x79c <Endpoint_Read_Control_Stream_LE+0x6e>
 766:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 76a:	82 ff       	sbrs	r24, 2
 76c:	e9 cf       	rjmp	.-46     	; 0x740 <Endpoint_Read_Control_Stream_LE+0x12>
 76e:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 772:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 776:	32 2f       	mov	r19, r18
 778:	28 2f       	mov	r18, r24
 77a:	23 2b       	or	r18, r19
 77c:	e1 f2       	breq	.-72     	; 0x736 <Endpoint_Read_Control_Stream_LE+0x8>
 77e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 782:	81 93       	st	Z+, r24
 784:	61 50       	subi	r22, 0x01	; 1
 786:	71 09       	sbc	r23, r1
 788:	91 f7       	brne	.-28     	; 0x76e <Endpoint_Read_Control_Stream_LE+0x40>
 78a:	d5 cf       	rjmp	.-86     	; 0x736 <Endpoint_Read_Control_Stream_LE+0x8>
 78c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
 790:	88 23       	and	r24, r24
 792:	31 f0       	breq	.+12     	; 0x7a0 <Endpoint_Read_Control_Stream_LE+0x72>
 794:	85 30       	cpi	r24, 0x05	; 5
 796:	b9 f6       	brne	.-82     	; 0x746 <Endpoint_Read_Control_Stream_LE+0x18>
 798:	83 e0       	ldi	r24, 0x03	; 3
 79a:	08 95       	ret
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	08 95       	ret
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	08 95       	ret

000007a4 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 7a4:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7a6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <USB_ControlRequest+0x6>
 7aa:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <USB_ControlRequest+0x7>
 7ae:	86 17       	cp	r24, r22
 7b0:	97 07       	cpc	r25, r23
 7b2:	a0 f0       	brcs	.+40     	; 0x7dc <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7b4:	61 15       	cp	r22, r1
 7b6:	71 05       	cpc	r23, r1
 7b8:	29 f4       	brne	.+10     	; 0x7c4 <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7be:	8e 77       	andi	r24, 0x7E	; 126
 7c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 7c4:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7c6:	61 15       	cp	r22, r1
 7c8:	71 05       	cpc	r23, r1
 7ca:	51 f4       	brne	.+20     	; 0x7e0 <Endpoint_Write_Control_PStream_LE+0x3c>
 7cc:	91 11       	cpse	r25, r1
 7ce:	08 c0       	rjmp	.+16     	; 0x7e0 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7d4:	82 ff       	sbrs	r24, 2
 7d6:	36 c0       	rjmp	.+108    	; 0x844 <Endpoint_Write_Control_PStream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	08 95       	ret
 7dc:	bc 01       	movw	r22, r24
 7de:	f2 cf       	rjmp	.-28     	; 0x7c4 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7e0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7e4:	88 23       	and	r24, r24
 7e6:	d1 f1       	breq	.+116    	; 0x85c <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7e8:	85 30       	cpi	r24, 0x05	; 5
 7ea:	d1 f1       	breq	.+116    	; 0x860 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
 7f0:	83 fd       	sbrc	r24, 3
 7f2:	32 c0       	rjmp	.+100    	; 0x858 <Endpoint_Write_Control_PStream_LE+0xb4>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
 7f8:	82 fd       	sbrc	r24, 2
 7fa:	ea cf       	rjmp	.-44     	; 0x7d0 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 7fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
 800:	80 ff       	sbrs	r24, 0
 802:	e1 cf       	rjmp	.-62     	; 0x7c6 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 804:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 808:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 80c:	32 2f       	mov	r19, r18
 80e:	28 2f       	mov	r18, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 810:	61 15       	cp	r22, r1
 812:	71 05       	cpc	r23, r1
 814:	19 f0       	breq	.+6      	; 0x81c <Endpoint_Write_Control_PStream_LE+0x78>
 816:	28 30       	cpi	r18, 0x08	; 8
 818:	31 05       	cpc	r19, r1
 81a:	58 f0       	brcs	.+22     	; 0x832 <Endpoint_Write_Control_PStream_LE+0x8e>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	28 30       	cpi	r18, 0x08	; 8
 820:	31 05       	cpc	r19, r1
 822:	09 f0       	breq	.+2      	; 0x826 <Endpoint_Write_Control_PStream_LE+0x82>
 824:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 826:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 82a:	8e 77       	andi	r24, 0x7E	; 126
 82c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 830:	ca cf       	rjmp	.-108    	; 0x7c6 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 832:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 834:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 838:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 83a:	61 50       	subi	r22, 0x01	; 1
 83c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 83e:	2f 5f       	subi	r18, 0xFF	; 255
 840:	3f 4f       	sbci	r19, 0xFF	; 255
 842:	e6 cf       	rjmp	.-52     	; 0x810 <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 844:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 848:	88 23       	and	r24, r24
 84a:	41 f0       	breq	.+16     	; 0x85c <Endpoint_Write_Control_PStream_LE+0xb8>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 84c:	85 30       	cpi	r24, 0x05	; 5
 84e:	41 f0       	breq	.+16     	; 0x860 <Endpoint_Write_Control_PStream_LE+0xbc>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 850:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
 854:	83 ff       	sbrs	r24, 3
 856:	bc cf       	rjmp	.-136    	; 0x7d0 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
 858:	81 e0       	ldi	r24, 0x01	; 1
}
 85a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 85c:	82 e0       	ldi	r24, 0x02	; 2
 85e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 860:	83 e0       	ldi	r24, 0x03	; 3
 862:	08 95       	ret

00000864 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 864:	98 2f       	mov	r25, r24
 866:	97 30       	cpi	r25, 0x07	; 7
 868:	28 f0       	brcs	.+10     	; 0x874 <Endpoint_ConfigureEndpoint_Prv+0x10>
 86a:	8f 70       	andi	r24, 0x0F	; 15
 86c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	08 95       	ret
 874:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 878:	24 2f       	mov	r18, r20
 87a:	76 2f       	mov	r23, r22
 87c:	50 e0       	ldi	r21, 0x00	; 0
 87e:	98 17       	cp	r25, r24
 880:	31 f0       	breq	.+12     	; 0x88e <Endpoint_ConfigureEndpoint_Prv+0x2a>
 882:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 886:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 88a:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 88e:	21 fd       	sbrc	r18, 1
 890:	02 c0       	rjmp	.+4      	; 0x896 <Endpoint_ConfigureEndpoint_Prv+0x32>
 892:	9f 5f       	subi	r25, 0xFF	; 255
 894:	e8 cf       	rjmp	.-48     	; 0x866 <Endpoint_ConfigureEndpoint_Prv+0x2>
 896:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 89a:	3e 7f       	andi	r19, 0xFE	; 254
 89c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8a0:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8a4:	3d 7f       	andi	r19, 0xFD	; 253
 8a6:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8aa:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8ae:	31 60       	ori	r19, 0x01	; 1
 8b0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 8b4:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 8b8:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 8bc:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 8c0:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 8c4:	27 fd       	sbrc	r18, 7
 8c6:	e5 cf       	rjmp	.-54     	; 0x892 <Endpoint_ConfigureEndpoint_Prv+0x2e>
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	08 95       	ret

000008cc <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 8cc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>
 8d0:	87 ff       	sbrs	r24, 7
 8d2:	13 c0       	rjmp	.+38     	; 0x8fa <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 8d8:	82 ff       	sbrs	r24, 2
 8da:	06 c0       	rjmp	.+12     	; 0x8e8 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 8dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8e0:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 8e8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
 8ec:	81 11       	cpse	r24, r1
 8ee:	f2 cf       	rjmp	.-28     	; 0x8d4 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
 8f0:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 8f2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <USB_DeviceState>
 8f6:	88 23       	and	r24, r24
 8f8:	d9 f3       	breq	.-10     	; 0x8f0 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
 8fe:	80 ff       	sbrs	r24, 0
 900:	f8 cf       	rjmp	.-16     	; 0x8f2 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 902:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 906:	8e 77       	andi	r24, 0x7E	; 126
 908:	ec cf       	rjmp	.-40     	; 0x8e2 <Endpoint_ClearStatusStage+0x16>

0000090a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 90a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 90e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 912:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 914:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 918:	90 ff       	sbrs	r25, 0
 91a:	06 c0       	rjmp	.+12     	; 0x928 <Endpoint_WaitUntilReady+0x1e>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 91c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 920:	90 ff       	sbrs	r25, 0
 922:	06 c0       	rjmp	.+12     	; 0x930 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
 924:	80 e0       	ldi	r24, 0x00	; 0
 926:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 928:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 92c:	92 fd       	sbrc	r25, 2
 92e:	fa cf       	rjmp	.-12     	; 0x924 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 930:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 934:	99 23       	and	r25, r25
 936:	91 f0       	breq	.+36     	; 0x95c <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 938:	95 30       	cpi	r25, 0x05	; 5
 93a:	91 f0       	breq	.+36     	; 0x960 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 93c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 940:	95 fd       	sbrc	r25, 5
 942:	10 c0       	rjmp	.+32     	; 0x964 <Endpoint_WaitUntilReady+0x5a>
 944:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 948:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 94c:	24 17       	cp	r18, r20
 94e:	35 07       	cpc	r19, r21
 950:	09 f3       	breq	.-62     	; 0x914 <Endpoint_WaitUntilReady+0xa>
 952:	81 50       	subi	r24, 0x01	; 1
 954:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 956:	f1 f6       	brne	.-68     	; 0x914 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 958:	84 e0       	ldi	r24, 0x04	; 4
 95a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 95c:	82 e0       	ldi	r24, 0x02	; 2
 95e:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
 960:	83 e0       	ldi	r24, 0x03	; 3
 962:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
 964:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
 966:	08 95       	ret

00000968 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
 968:	67 d0       	rcall	.+206    	; 0xa38 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 96a:	6e d0       	rcall	.+220    	; 0xa48 <USB_INT_ClearAllInterrupts>
 96c:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	80 81       	ld	r24, Z
 972:	81 60       	ori	r24, 0x01	; 1
 974:	80 83       	st	Z, r24
 976:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	8f 77       	andi	r24, 0x7F	; 127
 97e:	80 83       	st	Z, r24
 980:	19 bc       	out	0x29, r1	; 41
				PLLCSR = 0;
 982:	a7 ed       	ldi	r26, 0xD7	; 215
				UHWCON &= ~(1 << UVREGE);
 984:	b0 e0       	ldi	r27, 0x00	; 0
 986:	8c 91       	ld	r24, X
 988:	8e 7f       	andi	r24, 0xFE	; 254
 98a:	8c 93       	st	X, r24
 98c:	80 81       	ld	r24, Z
				USBCON &= ~(1 << OTGPADE);
 98e:	8f 7e       	andi	r24, 0xEF	; 239
 990:	80 83       	st	Z, r24
 992:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
 996:	08 95       	ret

00000998 <USB_ResetInterface>:
}
 998:	0f 93       	push	r16

void USB_ResetInterface(void)
{
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 9a0:	4b d0       	rcall	.+150    	; 0xa38 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 9a2:	52 d0       	rcall	.+164    	; 0xa48 <USB_INT_ClearAllInterrupts>
 9a4:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 9a6:	d0 e0       	ldi	r29, 0x00	; 0
 9a8:	88 81       	ld	r24, Y
 9aa:	8f 77       	andi	r24, 0x7F	; 127
 9ac:	88 83       	st	Y, r24
 9ae:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 9b0:	80 68       	ori	r24, 0x80	; 128
 9b2:	88 83       	st	Y, r24
 9b4:	88 81       	ld	r24, Y
				USBCON &= ~(1 << FRZCLK);
 9b6:	8f 7d       	andi	r24, 0xDF	; 223
 9b8:	88 83       	st	Y, r24
 9ba:	19 bc       	out	0x29, r1	; 41
				PLLCSR = 0;
 9bc:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 9c0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 9c4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 9c8:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 9cc:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 9ce:	10 e0       	ldi	r17, 0x00	; 0
 9d0:	f8 01       	movw	r30, r16
 9d2:	80 81       	ld	r24, Z
 9d4:	8b 7f       	andi	r24, 0xFB	; 251
 9d6:	80 83       	st	Z, r24
 9d8:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 9da:	81 60       	ori	r24, 0x01	; 1
 9dc:	88 83       	st	Y, r24
 9de:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
 9e0:	60 e0       	ldi	r22, 0x00	; 0
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	3f df       	rcall	.-386    	; 0x864 <Endpoint_ConfigureEndpoint_Prv>
 9e6:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	80 81       	ld	r24, Z
 9ec:	8e 7f       	andi	r24, 0xFE	; 254
 9ee:	80 83       	st	Z, r24
 9f0:	e2 ee       	ldi	r30, 0xE2	; 226
						UDIEN  |= (1 << SUSPE);
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	81 60       	ori	r24, 0x01	; 1
 9f8:	80 83       	st	Z, r24
 9fa:	80 81       	ld	r24, Z
						UDIEN  |= (1 << EORSTE);
 9fc:	88 60       	ori	r24, 0x08	; 8
 9fe:	80 83       	st	Z, r24
 a00:	f8 01       	movw	r30, r16
				UDCON  &= ~(1 << DETACH);
 a02:	80 81       	ld	r24, Z
 a04:	8e 7f       	andi	r24, 0xFE	; 254
 a06:	80 83       	st	Z, r24
 a08:	88 81       	ld	r24, Y
				USBCON |=  (1 << OTGPADE);
 a0a:	80 61       	ori	r24, 0x10	; 16
 a0c:	88 83       	st	Y, r24
 a0e:	df 91       	pop	r29
}
 a10:	cf 91       	pop	r28
 a12:	1f 91       	pop	r17
 a14:	0f 91       	pop	r16
 a16:	08 95       	ret

00000a18 <USB_Init>:
 a18:	e8 ed       	ldi	r30, 0xD8	; 216
				USBCON &= ~(1 << OTGPADE);
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	8f 7e       	andi	r24, 0xEF	; 239
 a20:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
 a22:	e7 ed       	ldi	r30, 0xD7	; 215
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	80 81       	ld	r24, Z
 a28:	81 60       	ori	r24, 0x01	; 1
 a2a:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
 a2c:	84 e0       	ldi	r24, 0x04	; 4
 a2e:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <USB_IsInitialized>
	USB_ResetInterface();
 a36:	b0 cf       	rjmp	.-160    	; 0x998 <USB_ResetInterface>

00000a38 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 a38:	e8 ed       	ldi	r30, 0xD8	; 216
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	80 81       	ld	r24, Z
 a3e:	8e 7f       	andi	r24, 0xFE	; 254
 a40:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 a42:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
 a46:	08 95       	ret

00000a48 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 a48:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 a4c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
 a50:	08 95       	ret

00000a52 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 a52:	1f 92       	push	r1
 a54:	0f 92       	push	r0
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	0f 92       	push	r0
 a5a:	11 24       	eor	r1, r1
 a5c:	2f 93       	push	r18
 a5e:	3f 93       	push	r19
 a60:	4f 93       	push	r20
 a62:	5f 93       	push	r21
 a64:	6f 93       	push	r22
 a66:	7f 93       	push	r23
 a68:	8f 93       	push	r24
 a6a:	9f 93       	push	r25
 a6c:	af 93       	push	r26
 a6e:	bf 93       	push	r27
 a70:	ef 93       	push	r30
 a72:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 a74:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 a78:	82 ff       	sbrs	r24, 2
 a7a:	0a c0       	rjmp	.+20     	; 0xa90 <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
 a7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a80:	82 ff       	sbrs	r24, 2
 a82:	06 c0       	rjmp	.+12     	; 0xa90 <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
 a84:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 a88:	8b 7f       	andi	r24, 0xFB	; 251
 a8a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 a8e:	fd dc       	rcall	.-1542   	; 0x48a <EVENT_USB_Device_StartOfFrame>
						return (USBINT & (1 << VBUSTI));
 a90:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 a94:	80 ff       	sbrs	r24, 0
 a96:	18 c0       	rjmp	.+48     	; 0xac8 <__vector_10+0x76>
						return (USBCON & (1 << VBUSTE));
 a98:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 a9c:	80 ff       	sbrs	r24, 0
 a9e:	14 c0       	rjmp	.+40     	; 0xac8 <__vector_10+0x76>
						USBINT &= ~(1 << VBUSTI);
 aa0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 aa4:	8e 7f       	andi	r24, 0xFE	; 254
 aa6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 aaa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 aae:	80 ff       	sbrs	r24, 0
 ab0:	8f c0       	rjmp	.+286    	; 0xbd0 <__stack+0xd1>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 ab2:	80 e1       	ldi	r24, 0x10	; 16
 ab4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 ab6:	82 e1       	ldi	r24, 0x12	; 18
 ab8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 aba:	09 b4       	in	r0, 0x29	; 41
 abc:	00 fe       	sbrs	r0, 0
 abe:	fd cf       	rjmp	.-6      	; 0xaba <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 ac6:	be db       	rcall	.-2180   	; 0x244 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
 ac8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 acc:	80 ff       	sbrs	r24, 0
 ace:	18 c0       	rjmp	.+48     	; 0xb00 <__stack+0x1>
						return (UDIEN  & (1 << SUSPE));
 ad0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ad4:	80 ff       	sbrs	r24, 0
 ad6:	14 c0       	rjmp	.+40     	; 0xb00 <__stack+0x1>
						UDIEN  &= ~(1 << SUSPE);
 ad8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 adc:	8e 7f       	andi	r24, 0xFE	; 254
 ade:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
 ae2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ae6:	80 61       	ori	r24, 0x10	; 16
 ae8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 aec:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 af0:	80 62       	ori	r24, 0x20	; 32
 af2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
 af6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 af8:	85 e0       	ldi	r24, 0x05	; 5
 afa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 afe:	0b d2       	rcall	.+1046   	; 0xf16 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
 b00:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 b04:	84 ff       	sbrs	r24, 4
 b06:	28 c0       	rjmp	.+80     	; 0xb58 <__stack+0x59>
						return (UDIEN  & (1 << WAKEUPE));
 b08:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b0c:	84 ff       	sbrs	r24, 4
 b0e:	24 c0       	rjmp	.+72     	; 0xb58 <__stack+0x59>
				PLLCSR = USB_PLL_PSC;
 b10:	80 e1       	ldi	r24, 0x10	; 16
 b12:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 b14:	82 e1       	ldi	r24, 0x12	; 18
 b16:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 b18:	09 b4       	in	r0, 0x29	; 41
 b1a:	00 fe       	sbrs	r0, 0
 b1c:	fd cf       	rjmp	.-6      	; 0xb18 <__stack+0x19>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 b1e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 b22:	8f 7d       	andi	r24, 0xDF	; 223
 b24:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
 b28:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b2c:	8f 7e       	andi	r24, 0xEF	; 239
 b2e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
 b32:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b36:	8f 7e       	andi	r24, 0xEF	; 239
 b38:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
 b3c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b40:	81 60       	ori	r24, 0x01	; 1
 b42:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 b46:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <USB_Device_ConfigurationNumber>
 b4a:	88 23       	and	r24, r24
 b4c:	09 f4       	brne	.+2      	; 0xb50 <__stack+0x51>
 b4e:	45 c0       	rjmp	.+138    	; 0xbda <__stack+0xdb>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 b50:	84 e0       	ldi	r24, 0x04	; 4
 b52:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 b56:	df d1       	rcall	.+958    	; 0xf16 <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
 b58:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 b5c:	83 ff       	sbrs	r24, 3
 b5e:	27 c0       	rjmp	.+78     	; 0xbae <__stack+0xaf>
						return (UDIEN  & (1 << EORSTE));
 b60:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b64:	83 ff       	sbrs	r24, 3
 b66:	23 c0       	rjmp	.+70     	; 0xbae <__stack+0xaf>
						UDINT  &= ~(1 << EORSTI);
 b68:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b6c:	87 7f       	andi	r24, 0xF7	; 247
 b6e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 b72:	82 e0       	ldi	r24, 0x02	; 2
 b74:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 b78:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
 b7c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 b80:	8e 7f       	andi	r24, 0xFE	; 254
 b82:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
 b86:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b8a:	8e 7f       	andi	r24, 0xFE	; 254
 b8c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
 b90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 b94:	80 61       	ori	r24, 0x10	; 16
 b96:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 b9a:	42 e0       	ldi	r20, 0x02	; 2
 b9c:	60 e0       	ldi	r22, 0x00	; 0
 b9e:	80 e0       	ldi	r24, 0x00	; 0
 ba0:	61 de       	rcall	.-830    	; 0x864 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
 ba2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 ba6:	88 60       	ori	r24, 0x08	; 8
 ba8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 bac:	b4 d1       	rcall	.+872    	; 0xf16 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 bae:	ff 91       	pop	r31
 bb0:	ef 91       	pop	r30
 bb2:	bf 91       	pop	r27
 bb4:	af 91       	pop	r26
 bb6:	9f 91       	pop	r25
 bb8:	8f 91       	pop	r24
 bba:	7f 91       	pop	r23
 bbc:	6f 91       	pop	r22
 bbe:	5f 91       	pop	r21
 bc0:	4f 91       	pop	r20
 bc2:	3f 91       	pop	r19
 bc4:	2f 91       	pop	r18
 bc6:	0f 90       	pop	r0
 bc8:	0f be       	out	0x3f, r0	; 63
 bca:	0f 90       	pop	r0
 bcc:	1f 90       	pop	r1
				PLLCSR = 0;
 bce:	18 95       	reti
			USB_DeviceState = DEVICE_STATE_Unattached;
 bd0:	19 bc       	out	0x29, r1	; 41
 bd2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 bd6:	37 db       	rcall	.-2450   	; 0x246 <EVENT_USB_Device_Disconnect>
 bd8:	77 cf       	rjmp	.-274    	; 0xac8 <__vector_10+0x76>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bda:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 bde:	87 fd       	sbrc	r24, 7
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <__stack+0xe7>
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	b6 cf       	rjmp	.-148    	; 0xb52 <__stack+0x53>
 be6:	83 e0       	ldi	r24, 0x03	; 3
 be8:	b4 cf       	rjmp	.-152    	; 0xb52 <__stack+0x53>

00000bea <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 bea:	1f 92       	push	r1
 bec:	0f 92       	push	r0
 bee:	0f b6       	in	r0, 0x3f	; 63
 bf0:	0f 92       	push	r0
 bf2:	11 24       	eor	r1, r1
 bf4:	2f 93       	push	r18
 bf6:	3f 93       	push	r19
 bf8:	4f 93       	push	r20
 bfa:	5f 93       	push	r21
 bfc:	6f 93       	push	r22
 bfe:	7f 93       	push	r23
 c00:	8f 93       	push	r24
 c02:	9f 93       	push	r25
 c04:	af 93       	push	r26
 c06:	bf 93       	push	r27
 c08:	cf 93       	push	r28
 c0a:	ef 93       	push	r30
 c0c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 c0e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 c12:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 c14:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c18:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
 c1c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 c20:	87 7f       	andi	r24, 0xF7	; 247
 c22:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 c26:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 c28:	1b d0       	rcall	.+54     	; 0xc60 <USB_Device_ProcessControlRequest>
 c2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
 c2e:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 c32:	88 60       	ori	r24, 0x08	; 8
 c34:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 c38:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 c3c:	ff 91       	pop	r31
 c3e:	ef 91       	pop	r30
 c40:	cf 91       	pop	r28
 c42:	bf 91       	pop	r27
 c44:	af 91       	pop	r26
 c46:	9f 91       	pop	r25
 c48:	8f 91       	pop	r24
 c4a:	7f 91       	pop	r23
 c4c:	6f 91       	pop	r22
 c4e:	5f 91       	pop	r21
 c50:	4f 91       	pop	r20
 c52:	3f 91       	pop	r19
 c54:	2f 91       	pop	r18
 c56:	0f 90       	pop	r0
 c58:	0f be       	out	0x3f, r0	; 63
 c5a:	0f 90       	pop	r0
 c5c:	1f 90       	pop	r1
 c5e:	18 95       	reti

00000c60 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 c60:	1f 93       	push	r17
 c62:	cf 93       	push	r28
 c64:	df 93       	push	r29
 c66:	cd b7       	in	r28, 0x3d	; 61
 c68:	de b7       	in	r29, 0x3e	; 62
 c6a:	aa 97       	sbiw	r28, 0x2a	; 42
 c6c:	0f b6       	in	r0, 0x3f	; 63
 c6e:	f8 94       	cli
 c70:	de bf       	out	0x3e, r29	; 62
 c72:	0f be       	out	0x3f, r0	; 63
 c74:	cd bf       	out	0x3d, r28	; 61
 c76:	e4 e4       	ldi	r30, 0x44	; 68
 c78:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 c7a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 c7e:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 c80:	21 e0       	ldi	r18, 0x01	; 1
 c82:	ec 34       	cpi	r30, 0x4C	; 76
 c84:	f2 07       	cpc	r31, r18
 c86:	c9 f7       	brne	.-14     	; 0xc7a <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
 c88:	05 db       	rcall	.-2550   	; 0x294 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 c8e:	83 ff       	sbrs	r24, 3
 c90:	10 c0       	rjmp	.+32     	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 c92:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 c96:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <USB_ControlRequest+0x1>
 c9a:	95 30       	cpi	r25, 0x05	; 5
 c9c:	09 f4       	brne	.+2      	; 0xca0 <USB_Device_ProcessControlRequest+0x40>
 c9e:	d8 c0       	rjmp	.+432    	; 0xe50 <USB_Device_ProcessControlRequest+0x1f0>
 ca0:	00 f5       	brcc	.+64     	; 0xce2 <USB_Device_ProcessControlRequest+0x82>
 ca2:	91 30       	cpi	r25, 0x01	; 1
 ca4:	09 f4       	brne	.+2      	; 0xca8 <USB_Device_ProcessControlRequest+0x48>
 ca6:	8b c0       	rjmp	.+278    	; 0xdbe <USB_Device_ProcessControlRequest+0x15e>
 ca8:	08 f4       	brcc	.+2      	; 0xcac <USB_Device_ProcessControlRequest+0x4c>
 caa:	61 c0       	rjmp	.+194    	; 0xd6e <USB_Device_ProcessControlRequest+0x10e>
 cac:	93 30       	cpi	r25, 0x03	; 3
 cae:	09 f4       	brne	.+2      	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
 cb0:	86 c0       	rjmp	.+268    	; 0xdbe <USB_Device_ProcessControlRequest+0x15e>
 cb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 cb6:	83 ff       	sbrs	r24, 3
 cb8:	0a c0       	rjmp	.+20     	; 0xcce <USB_Device_ProcessControlRequest+0x6e>
				UEINTX &= ~(1 << RXSTPI);
 cba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cbe:	87 7f       	andi	r24, 0xF7	; 247
 cc0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
 cc4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 cc8:	80 62       	ori	r24, 0x20	; 32
 cca:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 cce:	aa 96       	adiw	r28, 0x2a	; 42
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	f8 94       	cli
 cd4:	de bf       	out	0x3e, r29	; 62
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	cd bf       	out	0x3d, r28	; 61
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
 cde:	1f 91       	pop	r17
 ce0:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
 ce2:	98 30       	cpi	r25, 0x08	; 8
 ce4:	09 f4       	brne	.+2      	; 0xce8 <USB_Device_ProcessControlRequest+0x88>
 ce6:	ec c0       	rjmp	.+472    	; 0xec0 <USB_Device_ProcessControlRequest+0x260>
 ce8:	99 30       	cpi	r25, 0x09	; 9
 cea:	09 f4       	brne	.+2      	; 0xcee <USB_Device_ProcessControlRequest+0x8e>
 cec:	f6 c0       	rjmp	.+492    	; 0xeda <USB_Device_ProcessControlRequest+0x27a>
 cee:	96 30       	cpi	r25, 0x06	; 6
 cf0:	01 f7       	brne	.-64     	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cf2:	80 58       	subi	r24, 0x80	; 128
 cf4:	82 30       	cpi	r24, 0x02	; 2
 cf6:	e8 f6       	brcc	.-70     	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 cf8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <USB_ControlRequest+0x2>
 cfc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <USB_ControlRequest+0x3>
 d00:	8c 3d       	cpi	r24, 0xDC	; 220
 d02:	23 e0       	ldi	r18, 0x03	; 3
 d04:	92 07       	cpc	r25, r18
 d06:	09 f0       	breq	.+2      	; 0xd0a <USB_Device_ProcessControlRequest+0xaa>
 d08:	c6 c0       	rjmp	.+396    	; 0xe96 <USB_Device_ProcessControlRequest+0x236>
	SignatureDescriptor.Header.Type = DTYPE_String;
 d0a:	83 e0       	ldi	r24, 0x03	; 3
 d0c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d0e:	8a e2       	ldi	r24, 0x2A	; 42
 d10:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d12:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d14:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 d16:	de 01       	movw	r26, r28
 d18:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d1a:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 d1c:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d1e:	51 e2       	ldi	r21, 0x21	; 33
 d20:	e3 2f       	mov	r30, r19
 d22:	f0 e0       	ldi	r31, 0x00	; 0
 d24:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 d28:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 d2a:	20 ff       	sbrs	r18, 0
 d2c:	03 c0       	rjmp	.+6      	; 0xd34 <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
 d2e:	e2 95       	swap	r30
 d30:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 d32:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 d34:	ef 70       	andi	r30, 0x0F	; 15
 d36:	8e 2f       	mov	r24, r30
 d38:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d3a:	ea 30       	cpi	r30, 0x0A	; 10
 d3c:	08 f4       	brcc	.+2      	; 0xd40 <USB_Device_ProcessControlRequest+0xe0>
 d3e:	a9 c0       	rjmp	.+338    	; 0xe92 <USB_Device_ProcessControlRequest+0x232>
 d40:	c7 96       	adiw	r24, 0x37	; 55
 d42:	8d 93       	st	X+, r24
 d44:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d46:	2f 5f       	subi	r18, 0xFF	; 255
 d48:	24 31       	cpi	r18, 0x14	; 20
 d4a:	51 f7       	brne	.-44     	; 0xd20 <USB_Device_ProcessControlRequest+0xc0>
				SREG = GlobalIntState;
 d4c:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
 d4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d52:	87 7f       	andi	r24, 0xF7	; 247
 d54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d58:	6a e2       	ldi	r22, 0x2A	; 42
 d5a:	70 e0       	ldi	r23, 0x00	; 0
 d5c:	ce 01       	movw	r24, r28
 d5e:	01 96       	adiw	r24, 0x01	; 1
 d60:	87 dc       	rcall	.-1778   	; 0x670 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d66:	8b 77       	andi	r24, 0x7B	; 123
 d68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 d6c:	a2 cf       	rjmp	.-188    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 d6e:	80 38       	cpi	r24, 0x80	; 128
 d70:	99 f0       	breq	.+38     	; 0xd98 <USB_Device_ProcessControlRequest+0x138>
 d72:	82 38       	cpi	r24, 0x82	; 130
 d74:	09 f0       	breq	.+2      	; 0xd78 <USB_Device_ProcessControlRequest+0x118>
 d76:	9d cf       	rjmp	.-198    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 d78:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest+0x4>
 d7c:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 d7e:	87 30       	cpi	r24, 0x07	; 7
 d80:	08 f0       	brcs	.+2      	; 0xd84 <USB_Device_ProcessControlRequest+0x124>
 d82:	97 cf       	rjmp	.-210    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d84:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 d88:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 d8c:	85 fb       	bst	r24, 5
 d8e:	88 27       	eor	r24, r24
 d90:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d92:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 d96:	06 c0       	rjmp	.+12     	; 0xda4 <USB_Device_ProcessControlRequest+0x144>
	uint8_t CurrentStatus = 0;
 d98:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
 d9c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <USB_Device_RemoteWakeupEnabled>
 da0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 da2:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
 da4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 da8:	97 7f       	andi	r25, 0xF7	; 247
 daa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 dae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 db2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 db6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 dba:	8e 77       	andi	r24, 0x7E	; 126
 dbc:	32 c0       	rjmp	.+100    	; 0xe22 <USB_Device_ProcessControlRequest+0x1c2>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 dbe:	28 2f       	mov	r18, r24
 dc0:	2d 7f       	andi	r18, 0xFD	; 253
 dc2:	09 f0       	breq	.+2      	; 0xdc6 <USB_Device_ProcessControlRequest+0x166>
 dc4:	76 cf       	rjmp	.-276    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 dc6:	88 23       	and	r24, r24
 dc8:	e9 f0       	breq	.+58     	; 0xe04 <USB_Device_ProcessControlRequest+0x1a4>
 dca:	82 30       	cpi	r24, 0x02	; 2
 dcc:	09 f0       	breq	.+2      	; 0xdd0 <USB_Device_ProcessControlRequest+0x170>
 dce:	71 cf       	rjmp	.-286    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 dd0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <USB_ControlRequest+0x2>
 dd4:	81 11       	cpse	r24, r1
 dd6:	20 c0       	rjmp	.+64     	; 0xe18 <USB_Device_ProcessControlRequest+0x1b8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 dd8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <USB_ControlRequest+0x4>
 ddc:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 dde:	2f ef       	ldi	r18, 0xFF	; 255
 de0:	28 0f       	add	r18, r24
 de2:	26 30       	cpi	r18, 0x06	; 6
 de4:	08 f0       	brcs	.+2      	; 0xde8 <USB_Device_ProcessControlRequest+0x188>
 de6:	65 cf       	rjmp	.-310    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 de8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
 dec:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 df0:	20 ff       	sbrs	r18, 0
 df2:	12 c0       	rjmp	.+36     	; 0xe18 <USB_Device_ProcessControlRequest+0x1b8>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 df4:	93 30       	cpi	r25, 0x03	; 3
 df6:	c9 f4       	brne	.+50     	; 0xe2a <USB_Device_ProcessControlRequest+0x1ca>
				UECONX |= (1 << STALLRQ);
 df8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 dfc:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
 dfe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 e02:	0a c0       	rjmp	.+20     	; 0xe18 <USB_Device_ProcessControlRequest+0x1b8>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 e04:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <USB_ControlRequest+0x2>
 e08:	81 30       	cpi	r24, 0x01	; 1
 e0a:	09 f0       	breq	.+2      	; 0xe0e <USB_Device_ProcessControlRequest+0x1ae>
 e0c:	52 cf       	rjmp	.-348    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 e0e:	93 30       	cpi	r25, 0x03	; 3
 e10:	09 f0       	breq	.+2      	; 0xe14 <USB_Device_ProcessControlRequest+0x1b4>
 e12:	80 e0       	ldi	r24, 0x00	; 0
 e14:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e18:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
 e1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e20:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
 e26:	52 dd       	rcall	.-1372   	; 0x8cc <Endpoint_ClearStatusStage>
 e28:	44 cf       	rjmp	.-376    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
				UECONX |= (1 << STALLRQC);
 e2a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 e2e:	90 61       	ori	r25, 0x10	; 16
 e30:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 e34:	21 e0       	ldi	r18, 0x01	; 1
 e36:	30 e0       	ldi	r19, 0x00	; 0
 e38:	01 c0       	rjmp	.+2      	; 0xe3c <USB_Device_ProcessControlRequest+0x1dc>
 e3a:	22 0f       	add	r18, r18
 e3c:	8a 95       	dec	r24
 e3e:	ea f7       	brpl	.-6      	; 0xe3a <USB_Device_ProcessControlRequest+0x1da>
 e40:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 e44:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
 e48:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 e4c:	88 60       	ori	r24, 0x08	; 8
 e4e:	d7 cf       	rjmp	.-82     	; 0xdfe <USB_Device_ProcessControlRequest+0x19e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 e50:	81 11       	cpse	r24, r1
 e52:	2f cf       	rjmp	.-418    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 e54:	10 91 46 01 	lds	r17, 0x0146	; 0x800146 <USB_ControlRequest+0x2>
 e58:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 e5a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 e5e:	80 78       	andi	r24, 0x80	; 128
 e60:	81 2b       	or	r24, r17
 e62:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
 e66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 e6a:	87 7f       	andi	r24, 0xF7	; 247
 e6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
 e70:	2d dd       	rcall	.-1446   	; 0x8cc <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 e72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
 e76:	80 ff       	sbrs	r24, 0
 e78:	fc cf       	rjmp	.-8      	; 0xe72 <USB_Device_ProcessControlRequest+0x212>
				UDADDR |= (1 << ADDEN);
 e7a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 e7e:	80 68       	ori	r24, 0x80	; 128
 e80:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 e84:	83 e0       	ldi	r24, 0x03	; 3
 e86:	11 11       	cpse	r17, r1
 e88:	01 c0       	rjmp	.+2      	; 0xe8c <USB_Device_ProcessControlRequest+0x22c>
 e8a:	82 e0       	ldi	r24, 0x02	; 2
 e8c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <USB_DeviceState>
 e90:	10 cf       	rjmp	.-480    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 e92:	c0 96       	adiw	r24, 0x30	; 48
 e94:	56 cf       	rjmp	.-340    	; 0xd42 <USB_Device_ProcessControlRequest+0xe2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 e96:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <USB_ControlRequest+0x4>
 e9a:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <USB_ControlRequest+0x5>
 e9e:	ae 01       	movw	r20, r28
 ea0:	4f 5f       	subi	r20, 0xFF	; 255
 ea2:	5f 4f       	sbci	r21, 0xFF	; 255
 ea4:	43 db       	rcall	.-2426   	; 0x52c <CALLBACK_USB_GetDescriptor>
 ea6:	bc 01       	movw	r22, r24
 ea8:	89 2b       	or	r24, r25
 eaa:	09 f4       	brne	.+2      	; 0xeae <USB_Device_ProcessControlRequest+0x24e>
 eac:	02 cf       	rjmp	.-508    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
 eae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 eb2:	97 7f       	andi	r25, 0xF7	; 247
 eb4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 eb8:	89 81       	ldd	r24, Y+1	; 0x01
 eba:	9a 81       	ldd	r25, Y+2	; 0x02
 ebc:	73 dc       	rcall	.-1818   	; 0x7a4 <Endpoint_Write_Control_PStream_LE>
 ebe:	51 cf       	rjmp	.-350    	; 0xd62 <USB_Device_ProcessControlRequest+0x102>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 ec0:	80 38       	cpi	r24, 0x80	; 128
 ec2:	09 f0       	breq	.+2      	; 0xec6 <USB_Device_ProcessControlRequest+0x266>
 ec4:	f6 ce       	rjmp	.-532    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
 ec6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 eca:	87 7f       	andi	r24, 0xF7	; 247
 ecc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ed0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <USB_Device_ConfigurationNumber>
				UEDATX = Data;
 ed4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 ed8:	6e cf       	rjmp	.-292    	; 0xdb6 <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 eda:	81 11       	cpse	r24, r1
 edc:	ea ce       	rjmp	.-556    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 ede:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <USB_ControlRequest+0x2>
 ee2:	92 30       	cpi	r25, 0x02	; 2
 ee4:	08 f0       	brcs	.+2      	; 0xee8 <USB_Device_ProcessControlRequest+0x288>
 ee6:	e5 ce       	rjmp	.-566    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
 ee8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 eec:	87 7f       	andi	r24, 0xF7	; 247
 eee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 ef2:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
 ef6:	ea dc       	rcall	.-1580   	; 0x8cc <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
 ef8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <USB_Device_ConfigurationNumber>
 efc:	88 23       	and	r24, r24
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 efe:	29 f0       	breq	.+10     	; 0xf0a <USB_Device_ProcessControlRequest+0x2aa>
 f00:	84 e0       	ldi	r24, 0x04	; 4
 f02:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
 f06:	a0 d9       	rcall	.-3264   	; 0x248 <EVENT_USB_Device_ConfigurationChanged>
 f08:	d4 ce       	rjmp	.-600    	; 0xcb2 <USB_Device_ProcessControlRequest+0x52>
				return (UDADDR & (1 << ADDEN));
 f0a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 f0e:	87 fd       	sbrc	r24, 7
 f10:	f7 cf       	rjmp	.-18     	; 0xf00 <USB_Device_ProcessControlRequest+0x2a0>
 f12:	81 e0       	ldi	r24, 0x01	; 1
 f14:	f6 cf       	rjmp	.-20     	; 0xf02 <USB_Device_ProcessControlRequest+0x2a2>

00000f16 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 f16:	08 95       	ret

00000f18 <_exit>:
 f18:	f8 94       	cli

00000f1a <__stop_program>:
 f1a:	ff cf       	rjmp	.-2      	; 0xf1a <__stop_program>
